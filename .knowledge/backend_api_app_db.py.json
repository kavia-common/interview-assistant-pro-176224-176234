{"is_source_file": true, "format": "Python", "description": "This file provides a simple database connection pooling implementation and functions to execute SQL queries using pymysql. It manages connection lifecycle, supports executing single-row and multi-row queries, and handles transaction control.", "external_files": ["pymysql", "pymysql.cursors"], "external_methods": ["pymysql.connect"], "published": ["query_one", "query_all", "execute", "init_db_pool", "close_db_pool"], "classes": [], "methods": [{"name": "init_db_pool(host: str, port: int, user: str, password: str, db: str, min_conn: int = 1, max_conn: int = 5)", "description": "Initializes a connection pool with specified database parameters, stored globally.", "scope": "", "scopeKind": ""}, {"name": "_new_conn()", "description": "Creates a new database connection using stored parameters.", "scope": "", "scopeKind": ""}, {"name": "get_conn()", "description": "Retrieves a database connection, respecting the max connection limit.", "scope": "", "scopeKind": ""}, {"name": "release_conn(conn)", "description": "Releases a connection by closing it and updating connection count.", "scope": "", "scopeKind": ""}, {"name": "close_db_pool()", "description": "Placeholder for closing the database pool; currently does nothing.", "scope": "", "scopeKind": ""}, {"name": "Optional[Dict] query_one(sql: str, params: Tuple = ())", "description": "Executes a SQL query expected to return a single row, returning the row as a dict.", "scope": "", "scopeKind": ""}, {"name": "List[Dict] query_all(sql: str, params: Tuple = ())", "description": "Executes a SQL query returning multiple rows, returning a list of dicts.", "scope": "", "scopeKind": ""}, {"name": "int execute(sql: str, params: Tuple = ())", "description": "Executes an INSERT, UPDATE, or DELETE statement, returning the last insert ID or affected row count.", "scope": "", "scopeKind": ""}], "calls": ["pymysql.connect", "conn.cursor", "cur.execute", "conn.commit", "conn.rollback", "conn.close"], "search-terms": ["db connection pool", "pymysql", "simple SQL execution", "connection management", "database transaction"], "state": 2, "file_id": 8, "knowledge_revision": 39, "git_revision": "111a4eeaac88186c69fdd36c04df0cb777f8c450", "revision_history": [{"18": ""}, {"39": "111a4eeaac88186c69fdd36c04df0cb777f8c450"}], "ctags": [{"_type": "tag", "name": "_new_conn", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/app/db.py", "pattern": "/^def _new_conn():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "_pool", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/app/db.py", "pattern": "/^_pool: Dict[str, Any] = {}$/", "language": "Python", "typeref": "typename:Dict[str, Any]", "kind": "variable"}, {"_type": "tag", "name": "_pool_lock", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/app/db.py", "pattern": "/^_pool_lock = threading.Lock()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "close_db_pool", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/app/db.py", "pattern": "/^def close_db_pool():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "execute", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/app/db.py", "pattern": "/^def execute(sql: str, params: Tuple = ()) -> int:$/", "language": "Python", "typeref": "typename:int", "kind": "function", "signature": "(sql: str, params: Tuple = ())"}, {"_type": "tag", "name": "get_conn", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/app/db.py", "pattern": "/^def get_conn():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "init_db_pool", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/app/db.py", "pattern": "/^def init_db_pool(host: str, port: int, user: str, password: str, db: str, min_conn: int = 1, max/", "language": "Python", "kind": "function", "signature": "(host: str, port: int, user: str, password: str, db: str, min_conn: int = 1, max_conn: int = 5)"}, {"_type": "tag", "name": "query_all", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/app/db.py", "pattern": "/^def query_all(sql: str, params: Tuple = ()) -> List[Dict]:$/", "language": "Python", "typeref": "typename:List[Dict]", "kind": "function", "signature": "(sql: str, params: Tuple = ())"}, {"_type": "tag", "name": "query_one", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/app/db.py", "pattern": "/^def query_one(sql: str, params: Tuple = ()) -> Optional[Dict]:$/", "language": "Python", "typeref": "typename:Optional[Dict]", "kind": "function", "signature": "(sql: str, params: Tuple = ())"}, {"_type": "tag", "name": "release_conn", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/app/db.py", "pattern": "/^def release_conn(conn):$/", "language": "Python", "kind": "function", "signature": "(conn)"}], "hash": "2aef481b78f6c38e46a99a2521e5591d", "format-version": 4, "code-base-name": "backend_api", "filename": "backend_api/app/db.py", "fields": [{"name": "Dict[str, Any] _pool", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "_pool_lock = threading.Lock()", "scope": "", "scopeKind": "", "description": "unavailable"}]}