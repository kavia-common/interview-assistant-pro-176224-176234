{"is_source_file": true, "format": "Python", "description": "This file implements authentication utilities for a Flask-based web application, including password hashing, JWT token creation and decoding, bearer token parsing, and middleware to enforce authentication on protected routes.", "external_files": ["flask", "bcrypt", "jwt", ".config"], "external_methods": ["re.match", "bcrypt.gensalt", "bcrypt.hashpw", "bcrypt.checkpw", "jwt.encode", "jwt.decode", "time.time"], "published": ["create_password_hash", "verify_password", "create_jwt_token", "parse_bearer_token", "decode_jwt_token", "jwt_required_middleware"], "classes": [], "methods": [{"name": "bool _is_public(path: str)", "description": "Checks if a given request path matches any of the predefined public URL patterns.", "scope": "", "scopeKind": ""}, {"name": "bytes create_password_hash(password: str)", "description": "Generates a bcrypt hash for a supplied password.", "scope": "", "scopeKind": ""}, {"name": "bool verify_password(password: str, password_hash: bytes)", "description": "Checks if a provided password matches the given bcrypt hash.", "scope": "", "scopeKind": ""}, {"name": "str create_jwt_token(user_id: int, email: str, ttl_seconds: int = 60 * 60 * 24)", "description": "Creates a signed JWT token with user ID and email payload, valid for a specified TTL.", "scope": "", "scopeKind": ""}, {"name": "Optional[str] parse_bearer_token(auth_header: Optional[str])", "description": "Extracts the bearer token from the Authorization header.", "scope": "", "scopeKind": ""}, {"name": "Optional[dict] decode_jwt_token(token: str)", "description": "Decodes and verifies a JWT token, returning its payload if valid.", "scope": "", "scopeKind": ""}, {"name": "jwt_required_middleware()", "description": "Middleware function that authenticates requests and populates 'g.user' if valid credentials are present.", "scope": "", "scopeKind": ""}], "calls": ["re.match", "bcrypt.gensalt", "bcrypt.hashpw", "bcrypt.checkpw", "jwt.encode", "jwt.decode", "time.time"], "search-terms": ["JWT token handling", "Password hashing", "Flask request middleware", "Authorization header parsing", "Public route patterns"], "state": 2, "file_id": 9, "knowledge_revision": 38, "git_revision": "", "revision_history": [{"20": ""}, {"38": ""}], "ctags": [{"_type": "tag", "name": "PUBLIC_PATHS", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/app/auth.py", "pattern": "/^PUBLIC_PATHS = [$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "_cfg", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/app/auth.py", "pattern": "/^_cfg = get_config()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "_is_public", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/app/auth.py", "pattern": "/^def _is_public(path: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(path: str)"}, {"_type": "tag", "name": "create_jwt_token", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/app/auth.py", "pattern": "/^def create_jwt_token(user_id: int, email: str, ttl_seconds: int = 60 * 60 * 24) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(user_id: int, email: str, ttl_seconds: int = 60 * 60 * 24)"}, {"_type": "tag", "name": "create_password_hash", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/app/auth.py", "pattern": "/^def create_password_hash(password: str) -> bytes:$/", "language": "Python", "typeref": "typename:bytes", "kind": "function", "signature": "(password: str)"}, {"_type": "tag", "name": "decode_jwt_token", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/app/auth.py", "pattern": "/^def decode_jwt_token(token: str) -> Optional[dict]:$/", "language": "Python", "typeref": "typename:Optional[dict]", "kind": "function", "signature": "(token: str)"}, {"_type": "tag", "name": "jwt_required_middleware", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/app/auth.py", "pattern": "/^def jwt_required_middleware():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "parse_bearer_token", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/app/auth.py", "pattern": "/^def parse_bearer_token(auth_header: Optional[str]) -> Optional[str]:$/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "function", "signature": "(auth_header: Optional[str])"}, {"_type": "tag", "name": "verify_password", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/app/auth.py", "pattern": "/^def verify_password(password: str, password_hash: bytes) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(password: str, password_hash: bytes)"}], "hash": "b9d07e178a905a3932e3926c3a29a8ab", "format-version": 4, "code-base-name": "backend_api", "filename": "backend_api/app/auth.py", "fields": [{"name": "PUBLIC_PATHS = [", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "_cfg = get_config()", "scope": "", "scopeKind": "", "description": "unavailable"}]}