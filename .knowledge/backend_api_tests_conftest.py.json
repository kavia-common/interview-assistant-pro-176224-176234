{"is_source_file": true, "format": "Python", "description": "This file is a test configuration script using pytest for a Flask application. It sets up fixtures for testing, including app creation, database cleanup, user registration, session management, and question seeding. The code manages test environment setup and teardown, interacting with the database via SQL queries and executing test actions through HTTP endpoints.", "external_files": ["app", "app.db", "app.config"], "external_methods": ["create_app", "query_one", "query_all", "execute"], "published": ["app", "client", "db_cleaner", "registered_user", "seeded_questions", "started_session", "answered_response"], "classes": [], "methods": [{"name": "app()", "description": "Creates and returns a Flask app instance for testing, initializing environment variables.", "scope": "", "scopeKind": ""}, {"name": "client(app)", "description": "Provides a test client with app context for sending requests in tests.", "scope": "", "scopeKind": ""}, {"name": "Generator[None,None,None] db_cleaner()", "description": "Cleans up test data related to specific user emails after tests run, deleting associated records from the database.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,str] _auth_headers(token: str)", "description": "Constructs authorization headers bearing a JWT token.", "scope": "", "scopeKind": ""}, {"name": "Tuple[int,str] registered_user(client, db_cleaner)", "description": "Registers a user or logs in if already existing, returning user_id and JWT token.", "scope": "", "scopeKind": ""}, {"name": "Generator[Dict[str,int],None,None] seeded_questions(db_cleaner)", "description": "Inserts sample questions into the database for testing and cleans them up after use.", "scope": "", "scopeKind": ""}, {"name": "int started_session(client, registered_user)", "description": "Starts an interview session for a registered user and returns the session ID.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,int] answered_response(client, registered_user, started_session, seeded_questions)", "description": "Submits an answer for a question within a session, returning details about the response.", "scope": "", "scopeKind": ""}], "calls": ["os.path.dirname", "os.path.abspath", "os.chdir", "create_app", "query_one", "query_all", "execute", "client.post", "pytest.fail"], "search-terms": ["pytest fixtures", "Flask testing setup", "database cleanup", "session management", "question insertion", "test user registration"], "state": 2, "file_id": 18, "knowledge_revision": 48, "git_revision": "", "ctags": [{"_type": "tag", "name": "BASE_DIR", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/tests/conftest.py", "pattern": "/^BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "_auth_headers", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/tests/conftest.py", "pattern": "/^def _auth_headers(token: str) -> Dict[str, str]:$/", "language": "Python", "typeref": "typename:Dict[str,str]", "kind": "function", "signature": "(token: str)"}, {"_type": "tag", "name": "answered_response", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/tests/conftest.py", "pattern": "/^def answered_response(client, registered_user, started_session, seeded_questions) -> Dict[str, i/", "language": "Python", "typeref": "typename:Dict[str,int]", "kind": "function", "signature": "(client, registered_user, started_session, seeded_questions)"}, {"_type": "tag", "name": "app", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/tests/conftest.py", "pattern": "/^def app():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "client", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/tests/conftest.py", "pattern": "/^def client(app):$/", "language": "Python", "kind": "function", "signature": "(app)"}, {"_type": "tag", "name": "db_cleaner", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/tests/conftest.py", "pattern": "/^def db_cleaner() -> Generator[None, None, None]:$/", "language": "Python", "typeref": "typename:Generator[None,None,None]", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "registered_user", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/tests/conftest.py", "pattern": "/^def registered_user(client, db_cleaner) -> Tuple[int, str]:$/", "language": "Python", "typeref": "typename:Tuple[int,str]", "kind": "function", "signature": "(client, db_cleaner)"}, {"_type": "tag", "name": "seeded_questions", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/tests/conftest.py", "pattern": "/^def seeded_questions(db_cleaner) -> Generator[Dict[str, int], None, None]:$/", "language": "Python", "typeref": "typename:Generator[Dict[str,int],None,None]", "kind": "function", "signature": "(db_cleaner)"}, {"_type": "tag", "name": "started_session", "path": "/home/kavia/workspace/code-generation/interview-assistant-pro-176224-176234/backend_api/tests/conftest.py", "pattern": "/^def started_session(client, registered_user) -> int:$/", "language": "Python", "typeref": "typename:int", "kind": "function", "signature": "(client, registered_user)"}], "hash": "36975213aafb94094b11f2d732061f0f", "format-version": 4, "code-base-name": "backend_api", "filename": "backend_api/tests/conftest.py", "fields": [{"name": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"48": ""}]}